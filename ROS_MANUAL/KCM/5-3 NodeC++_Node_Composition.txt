#include <memory>
#include "rclcpp/rclcpp.hpp"

// 핵심!! rclcpp::Node를 상속받습니다.
class Talker : public rclcpp::Node
{
private:
	// Node를 주기적으로 실행시켜 줄 timer 입니다.
  rclcpp::TimerBase::SharedPtr m_timer;
  size_t m_count;
	
  // 실질적으로 실행될 함수입니다.
  void timer_callback()
  {
    m_count++;
		// Log를 남겨보겠습니다.
    RCLCPP_INFO(this->get_logger(), "I am Simple OOP Example, count : %d", m_count);
  }

public:
	// Node의 생성 시에, 이름을 설정해주어야 하며 이는 다음과 같이 구현합니다.
  Talker() : Node("simple_oop_node")
  {
		// create_wall_timer 함수에 timer와 실행시킬 함수를 전달하면 편리하게 주기적 실행을 할 수 있습니다.
		// this->는 굳이 명시하지 않아도 됩니다.
		// 여기 std::bind사용하면 클래스 내의 함수를 일반 함수처럼 사용할 수 있음
    m_timer = this->create_wall_timer(std::chrono::milliseconds(500), std::bind(&Talker::timer_callback, this));
  }
};

int main(int argc, char **argv)
{
  rclcpp::init(argc, argv);

	// spin은 Node내부에 정해진 timer에 따라 Node를 주기적으로 동작, 갱신시켜줍니다.
	// while loop 대신 사용하는 거임
	// 매개변수로는 shared_ptr 타입의 Node 
  rclcpp::spin(std::make_shared<Talker>());
  rclcpp::shutdown();
  return 0;
}